// ### 市松模様
// 1. 以下のような市松模様を作成する関数 checkerboard を実装してください
// 2. 関数 checkerboard は、引数 n に正の整数を受け取り、n x n の市松模様を表す文字列を返します
// 3. 市松模様は、'#' と '.' が交互に並び、各行は改行で区切られます
// 4. 市松模様の左上の文字は '#' です

// ### エラトステネスの篩
// 1. 以下のようなエラトステネスの篩を実装する関数 sieve を実装してください
// 2. 関数 sieve は、引数 n に正の整数を受け取り、n 以下の全ての素数を配列で返します
// 3. 配列の要素は昇順に並びます
// 4. 素数が存在しない場合は空の配列を返します
// 5. エラトステネスの篩は、2 から n までの数を順に見ていき、その数が素数であれば、その数の倍数を全て削除していくアルゴリズムです
// 6. 例えば、n = 10 の場合、2 から 10 までの数を順に見ていきます
//   - 2 は素数なので、2 の倍数を全て削除します
//   - 3 も素数なので、3 の倍数を全て削除します
//   - 4 は 2 の倍数なので、削除済みです
//   - 5 も素数なので、5 の倍数を全て削除します
//   - 6 は 2 の倍数なので、削除済みです
//   - 7 も素数なので、7 の倍数を全て削除します
//   - 8 は 2 の倍数なので、削除済みです
//   - 9 は 3 の倍数なので、削除済みです
//   - 10 は 2 の倍数なので、削除済みです
// 7. このようにして、残った数が素数になります
// 8. なお、エラトステネスの篩は、計算量が O(n log log n) と非常に高速です

// ### トランプのカード
// 1. 以下のようなトランプのカードを表すオブジェクト配列があります
// 3. スート suit は、'♠', '♣', '♥', '♦' のいずれかです
// 4. ランク rank は、'A', '2', '3', ..., '10', 'J', 'Q', 'K' のいずれかです
// 5. トランプのカードは、スートとランクの組み合わせで表されます

const suits = ['♠', '♣', '♥', '♦'];
const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];

const cards = suits.flatMap((suit) => ranks.map((rank) => ({ suit, rank })));

console.log(cards);
